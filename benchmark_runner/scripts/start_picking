#!/usr/bin/env python
from __future__ import print_function

import sys
import tf
import rospy
import moveit_commander
import geometry_msgs.msg
from std_srvs.srv import Trigger, TriggerRequest, TriggerResponse
from nexon.util import tuples_to_pose
from nexon.srv import PTPPlanning, PTPPlanningRequest, PTPPlanningResponse
from nexon.srv import ShowJointTrajectory, ShowJointTrajectoryRequest, ShowJointTrajectoryResponse


def ros_setup():
    moveit_commander.roscpp_initialize(sys.argv)
    rospy.init_node('pick_and_place_demo', anonymous=True)


class PickingServer:
    def __init__(self):
        self.listener = tf.TransformListener()
        # replace this with a planning server
        self.connect_to_planning_server()

    def connect_to_planning_server(self):
        rospy.wait_for_service('planning_request')
        rospy.wait_for_service('move_home_request')
        rospy.wait_for_service('show_trajectory')
        self.plan_service = rospy.ServiceProxy('planning_request', PTPPlanning)
        self.move_home_service = rospy.ServiceProxy(
            'move_home_request', Trigger)

        self.move_home_service = rospy.ServiceProxy(
            'move_home_request', Trigger)

    def look_for_pick_pose(self, timeout=4):
        """ Look for a transform called 'pick_pose_1' published by an external tf publisher."""
        listener = tf.TransformListener()
        pos, ori = None, None
        start = rospy.get_time()
        seconds = rospy.get_time()
        rate = rospy.Rate(10.0)
        while (seconds - start < timeout) and not rospy.is_shutdown():
            try:
                (pos, ori) = listener.lookupTransform(
                    '/world', '/pick_pose_1', rospy.Time(0))
                return tuples_to_pose(pos, ori)
            except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException):
                continue
            rate.sleep()
            seconds = rospy.get_time()

        rospy.loginfo("Failed to find pick pose")
        return None

    def pick_and_drop(self, pick_pose):
        plan_req = PTPPlanningRequest("PRM", pick_pose)
        resp = self.plan_service(plan_req)
        if resp.success:
            self.move_home_service(TriggerRequest())
        else:
            rospy.loginfo("Failed to move to the pick_pose")


if __name__ == '__main__':
    ros_setup()
    ps = PickingServer()

    pick_pose = ps.look_for_pick_pose()
    if pick_pose is not None:
        ps.pick_and_drop(pick_pose)
    else:
        rospy.loginfo("Failed to pick object, no pick pose.")
