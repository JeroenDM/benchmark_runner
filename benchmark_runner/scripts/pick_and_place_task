#!/usr/bin/env python
from __future__ import print_function

import sys
import time
import tf
import json
import rospy
import rospkg
import moveit_commander
import geometry_msgs.msg
import numpy as np

from visualization_msgs.msg import Marker
from std_srvs.srv import Trigger, TriggerRequest, TriggerResponse

from nexon_msgs.srv import PTPPlanning, PTPPlanningRequest, PTPPlanningResponse
from nexon.robot import Robot
from nexon.util import Plotter, write_plans_to_file, tuples_to_pose

GROUP_NAME = "manipulator"


def ros_setup():
    moveit_commander.roscpp_initialize(sys.argv)
    rospy.init_node('pick_and_place_demo', anonymous=True)


class PickTask:
    """
    Data class to hold parsed json file
    """

    def __init__(self, filepath):
        self.drop_joint_pos = None
        self.home_joint_pos = None
        self.pick_pose = None
        self.task = self.read_task_from_file(filepath)
        self.parse_task_dict(self.task)

    def read_task_from_file(self, filepath):
        with open(filepath, 'r') as infile:
            task = json.load(infile)
        return task

    def parse_task_dict(self, task):
        for con in task['constraints']:
            if con['name'] == 'drop_position':
                self.drop_joint_pos = con['params']['vals']
            elif con['name'] == 'home_position':
                self.home_joint_pos = con['params']['vals']
            else:
                xyz = con['params']['xyz']
                wxyz = con['params']['wxyz']
                xyzw = [wxyz[1], wxyz[2], wxyz[3], wxyz[0]]
                self.pick_pose = tuples_to_pose(xyz, xyzw)


class PlanningServer:
    def __init__(self):
        self.ptp_server = rospy.Service('planning_request', PTPPlanning,
                                        self.handle_ptp_request)
        self.home_server = rospy.Service('move_home_request', Trigger,
                                         self.handle_move_home_request)

        self.robot = Robot()
        self.plt = Plotter()
        print("Ready receive planning requests.")

    def plan_pick(self, planner_id="PRM"):
        rospack = rospkg.RosPack()
        task_file_path = rospack.get_path('main_server')
        task_file_path += '/config/pick_and_place_task.json'

        task = PickTask(task_file_path)

        self.robot.mg.set_planner_id(planner_id)

        self.plt.plot_object(task.pick_pose)
        rospy.sleep(0.3)

        s1, plan1 = self.robot.move_to_pose(task.pick_pose)
        print("Planning to pick pose successful? {}".format(s1))
        return plan1.joint_trajectory.points

    def handle_ptp_request(self, req):
        print("Received planning request")
        print("Planner: {}".format(req.planner))
        print("goal pose: {}".format(req.goal))

        joint_path = self.plan_pick(req.planner)

        # pt = trajectory_msgs.msg.JointTrajectoryPoint()
        # pt.positions = [1, 2, 3]

        return PTPPlanningResponse(True, joint_path)

    def handle_move_home_request(self, req):
        print("Received request to move home.")
        s, p = self.robot.move_to_named_target("home")
        return TriggerResponse(s, "Did it work?")


def run_from_task_file_input(planner_type="PRM"):
    """
    Run pick and place demo where pick pose,
    drop pose and home pose are specified in a json file.
    """

    rospack = rospkg.RosPack()
    task_file_path = rospack.get_path('main_server')
    task_file_path += '/config/pick_and_place_task.json'

    task = PickTask(task_file_path)
    robot = Robot()
    plotter = Plotter()

    plotter.plot_object(task.pick_pose)
    rospy.sleep(0.3)

    s1, plan1 = robot.move_to_pose(task.pick_pose)

    robot.create_pick_object()
    robot.attach_pick_object()

    s2, plan2 = robot.move_to_joint_pos(task.drop_joint_pos)
    robot.drop_pick_object()

    s3, plan3 = robot.move_to_joint_pos(task.home_joint_pos)

    robot.remove_pick_object()
    plotter.delete_all_markers()

    write_plans_to_file([plan1, plan2, plan3])


if __name__ == '__main__':
    ros_setup()
    # run_from_task_file_input()
    ps = PlanningServer()
    rospy.spin()
